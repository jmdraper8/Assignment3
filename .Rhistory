library(data)
getwd()
setwd("~/OneDrive/Data Science/datasciencecoursea/C3_GettingandCleaningData")
dir()
setwd("~/OneDrive/Data Science/datasciencecoursea/C3_GettingandCleaningData/Assignment")
getwd()
dir()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(trainX)
source('~/.active-rstudio-document')
View(testY)
View(trainY)
source('~/.active-rstudio-document')
View(features)
View(activityLbl)
source('~/.active-rstudio-document')
mergeX <- merge(testX, trainX)
View(mergeX)
View(testX)
View(trainX)
mergeX <- intersect(testX, trainX)
mergeX <- union(testX, trainX)
View(mergeX)
rm(mergeX)
(x <- c(sort(sample(1:20, 9)), NA))
(y <- c(sort(sample(3:23, 7)), NA))
x
y
union(x, y)
intersect(x, y)
mergeX <- rbind(testX, trainX)
View(mergeX)
swirl()
library(swirl)
swirl()
reset()
swirl()
unique()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(mergeX, mean)
colMeans(mergeX)
install.packages("fbasics")
rm(flags)
rm(x)
rm(y)
View(mergeX)
summary(colMeans(mergeX))
summary(mergeX)
names(mergeX)
df1 <- data.frame(A = 1:10, B= 11:20)
df2 <- data.frame(A = 21:30, B = 31:40)
listDF <- list(df1, df2)
listDF
df1
new_col_name <- c("C", "D")
new_col_name
features
features$V2
lapply(listDF, setNames, nm = new_col_name)
lapply(df1, setNames, nm = new_col_name)
df
df1
lapply(mergeX, setNames, nm = features$V2)
View(mergeX)
new_col_name <- features$V2
new_col_name
lapply(mergeX, setNames, nm = new_col_name)
mergeX
head(mergeX)
colnames(mergeX)
colnames(mergeX) [1:561] <- new_col_name
View(mergeX)
names(mergeX)
colMeans(mergeX)
meansX <- colMeans(mergeX)
View(meansX)
mergeY <- rbind(testY, trainY)
View(mergeY)
View(df1)
View(activityLbl)
activityLbl
set.seed(42)
M <- matrix(rnorm(40),ncol=4)
M
apply(M, 2, sd)
stdX <- apply(mergeX, 2, std)
stdX <- apply(mergeX, 2, sd)
stdX
meanX
meanX
meansX
metricsX <- rbind(meansX, stdX)
metricsX
View(metricsX)
rownames(metricsX) <- c("Mean", "Standard Dev")
View(metricsX)
View(mergeY)
1
down vote
favorite
df <- data.frame(id = 1:10, key = 1:10)
View(df)
replace_key <- c(2,5)
replace_key
replace_id <- c(9,3)
replace_id
df$key[match(replace_id, df$id)] <- replace_key
df
df <- data.frame(id = 1:10, key = 1:10)
df
mergeY$V1[match(activityLbl$V1, mergeY$V1)] <- activityLbl$V2
View(mergeY)
mergeY$V1 <- mergeY$V1[match(mergeY$V1, activityLbl$V1]
mergeY$V1 <- mergeY$V1[match(mergeY$V1, activityLbl$V1)]
View(mergeY)
mergeY <- rbind(testY, trainY)
View(mergeY)
mergeY$V1 <- mergeY$V1[match(mergeY$V1, activityLbl$V1)]
View(mergeY)
View(activityLbl)
mergeY <- rbind(testY, trainY)
View(mergeY)
View(activityLbl)
mergeY$V1 <- activityLbl$V2[match(mergeY$V1, activityLbl$V1)]
View(mergeY)
fullData <- rbind(mergeY, mergeX)
fullData <- cbind(mergeY, mergeX)
View(fullData)
colnames(mergeY) <- "Activity"
View(mergeY)
mergeY$V1 <- activityLbl$V2[match(mergeY$V1, activityLbl$V1)]
View(mergeY)
fullData <- cbind(mergeY, mergeX)
View(fullData)
View(features)
extract_features <- grepl("mean|std", features)
extract_features
extract_features <- grepl("mean|std", features$V2)
features <- read.table("./features.txt")[,2]
features <- read.table("./features.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
View(features)
extract_features <- features$V2
features <- read.table("./features.txt")[,2]
extract_features <- grepl("mean|std", features)
features <- read.table("./features.txt")[,2]
features
features <- read.table("./features.txt")[,2]
extract_features <- grepl("mean|std", features)
features <- read.table("./features.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
View(features)
extract_features1 <- grepl("mean|std", features$V2)
mergeX = mergeX[,extract_features]
View(mergeX)
View(mergeY)
View(activityLbl)
View(trainY)
View(trainX)
subjectTrainData <- read.table("./train/subject_train.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
subjectTestData <- read.table("./test/subject_text.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
subjectTestData <- read.table("./test/subject_test.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
View(subjectTestData)
names(subject_test) = "subject"
names(subject_train) = "subject"
names(subjectTrainData) = "subject"
names(subjectTestData) = "subject"
View(subjectTestData)
rm(df)
rm(df1)
rm(df2)
rm(activityLbl)
rm(M)
trainDataX <- read.table("./train/X_train.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
trainDataY <- read.table("./train/Y_train.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
subjectTrainData <- read.table("./train/subject_train.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
testDataX <- read.table("./test/X_test.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
testDataY <- read.table("./test/Y_test.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
subjectTestData <- read.table("./test/subject_test.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
activities<- read.table("./activity_labels.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
features <- read.table("./features.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
View(activities)
View(activities)
names(mergeY) = c("Activity_ID", "Activity_Label")
View(testDataY)
testDataY[,2] = activity_labels[y_test[,1]]
trainDataY[,2] = activity_labels[y_test[,1]]
testDataY[,2] = activity_labels[testDataY[,1]]
trainDataY[,2] = activity_labels[trainDataY[,1]]
testDataY[,2] = activities[testDataY[,1]]
trainDataY[,2] = activities[trainDataY[,1]]
View(trainDataY)
View(activities)
testDataY[,2] = activities$V2[testDataY[,1]]
trainDataY[,2] = activities$V2[trainDataY[,1]]
View(trainDataX)
View(trainDataY)
names(trainDataY) = c("Activity_ID", "Activity_Label")
names(trainDataY) = c("Activity_ID", "Activity_Label")
View(trainDataY)
View(activities)
names(activities) = c("Activity_ID", "Activity_Label")
View(activities)
View(features)
names(features) = c("Feature_ID", "Feature_Label")
View(features)
View(subjectTestData)
View(subjectTrainData)
View(subjectTestData)
names(subjectTestData) = "Subject_ID"
View(subjectTestData)
names(subjectTrainData) = "Subject_ID"
View(testDataX)
View(testDataY)
View(trainDataY)
names(testDataY) = c("Activity_ID", "Activity_Label")
View(testDataY)
names(trainDataX) = features
View(trainDataX)
View(testDataX)
testDataX <- read.table("./test/X_test.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
View(testDataX)
colnames(testDataX) [1:561] <- features$Feature_Label
View(testDataX)
testDataX = testDataX[,extract_features]
trainDataX = trainDataX[,extract_features]
extract_features <- grepl("mean|std", features$V2)
View(features)
extract_features <- grepl("mean|std", features$Feature_Label)
testDataX = testDataX[,extract_features]
View(testDataX)
trainDataX = trainDataX[,extract_features]
View(subjectTrainData)
testData <- cbind(subjectTestData, testDataY, testDataX)
View(testData)
trainData <- cbind(subjectTrainData, trainDataY, trainDataX)
View(trainData)
View(testData)
View(trainDataX)
View(trainDataY)
trainDataX <- read.table("./train/X_train.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
trainDataY <- read.table("./train/Y_train.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
subjectTrainData <- read.table("./train/subject_train.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
View(trainDataY)
View(trainDataX)
View(subjectTrainData)
colnames(trainDataX) [1:561] <- features$Feature_Label
View(trainDataX)
names(subjectTrainData) = "Subject_ID"
names(trainDataY) = c("Activity_ID", "Activity_Label")
colnames(trainDataX) [1:561] <- features$Feature_Label
View(trainDataY)
names(trainDataY) = c("Activity_ID", "Activity_Label")
View(trainDataY)
trainDataY[,2] = activities$V2[trainDataY[,1]]
names(trainDataY) = c("Activity_ID", "Activity_Label")
View(trainDataY)
View(testDataY)
activities<- read.table("./activity_labels.txt", sep = "", header = F, na.strings ="", stringsAsFactors= F)
View(activities)
trainDataY[,2] = activities$V2[trainDataY[,1]]
View(trainDataY)
names(activities) = c("Activity_ID", "Activity_Label")
View(trainData)
View(trainDataX)
View(trainDataY)
names(trainDataY) = c("Activity_ID", "Activity_Label")
View(trainDataY)
trainDataX = trainDataX[,extract_features]
trainData <- cbind(subjectTrainData, trainDataY, trainDataX)
View(trainData)
View(testData)
fullData = rbind(testData, trainData)
View(fullData)
View(fullData)
idLabels   = c("subject", "Activity_ID", "Activity_Label")
dataLabels = setdiff(colnames(fullData), idLabels)
mergeData = melt(data, id = idLabels, measure.vars = dataLabels)
install.packages("reshape2")
library(reshape2)
mergeData = melt(data, id = idLabels, measure.vars = dataLabels)
View(mergeData)
mergeData = melt(fullData, id = idLabels, measure.vars = dataLabels)
idLabels   = c("Subject_ID", "Activity_ID", "Activity_Label")
mergeData = melt(fullData, id = idLabels, measure.vars = dataLabels)
View(mergeData)
id_labels = c("subject", "Activity_ID", "Activity_Label")
idLabels   = c("Subject_ID", "Activity_ID", "Activity_Label")
dataLabels = setdiff(colnames(fullData), idLabels)
mergeData = melt(data, id = idLabels, measure.vars = dataLabels)
View(fullData)
View(mergeData)
idLabels   = c("Subject_ID", "Activity_ID", "Activity_Label")
dataLabels = setdiff(colnames(fullData), idLabels)
mergeData = melt(fullData, id = idLabels, measure.vars = dataLabels)
View(mergeData)
cleanData = dcast(mergeData, Subject_ID + Activity_Label ~ variable, mean)
View(cleanData)
source('~/OneDrive/Data Science/datasciencecoursea/C3_GettingandCleaningData/Assignment/Assignment Script.R')
source('~/OneDrive/Data Science/datasciencecoursea/C3_GettingandCleaningData/Assignment/Assignment Script.R')
View(cleanData)
write.table(cleanData, file = "./tidy_data.txt")
